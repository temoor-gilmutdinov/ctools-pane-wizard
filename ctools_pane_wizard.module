<?php
/**
 * @file
 * Hooks and callbacks.
 */

/**
 * Implements hook_ctools_plugin_directory().
 */
function ctools_pane_wizard_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools' && $plugin_type == 'content_types') {
    return 'plugins/content_types';
  }
}

/**
 * Implements hook_permission().
 */
function ctools_pane_wizard_permission() {
  $items = array();

  $items['ctools_pane_wizard edit pane template'] = array(
    'title' => t('Edit pane template'),
    'description' => t('Whether template edit step is accessible.'),
  );

  $items['ctools_pane_wizard configure pane fields'] = array(
    'title' => t('Configure pane fields'),
    'description' => t('Whether field config step is accessible.'),
  );

  $items['ctools_pane_wizard ignore required fields'] = array(
    'title' => t('Ignore required fields'),
    'description' => t('For site builders purpose.'),
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function ctools_pane_wizard_theme(&$theme, $plugin) {
  return array(
    'universal_pane_inline_template' => array(
      'variables' => array(
        'field_settings' => array(),
        'field_values' => array(),
        'template' => '',
      ),
      'file' => 'ctools_pane_wizard.theme.inc',
    ),
    'universal_pane_inline_template_preview' => array(
      'variables' => array(
        'field_settings' => array(),
        'field_values' => array(),
        'template' => '',
      ),
      'file' => 'ctools_pane_wizard.theme.inc',
    ),
    'universal_pane_fields_table' => array(
      'render element' => 'container',
      'file' => 'ctools_pane_wizard.theme.inc',
    ),
    'universal_pane' => array(
      'variables' => array(
        'fields' => array(),
      ),
      'template' => 'universal-pane',
    ),
  );
}

/**
 * Render textfield.
 *
 * @param string $value
 *   Actual value.
 * @param array $config
 *   Field config
 *
 * @return string
 *   Rendered value.
 */
function universal_pane_render_textfield($value, $config) {
  return check_plain($value);
}

/**
 * Render textarea.
 *
 * @param string $value
 *   Actual value.
 * @param array $config
 *   Field config
 *
 * @return string
 *   Rendered value.
 */
function universal_pane_render_textarea($value, $config) {
  return check_markup($value, $config['format']);
}

/**
 * Render image.
 *
 * @param int $fid
 *   Image fid.
 * @param array $config
 *   Field config
 *
 * @return string
 *   Rendered value.
 */
function universal_pane_render_image($fid, $config) {
  if (!$image = file_load($fid)) {
    return '';
  }

  $variables = array(
    'path' => $image->uri,
  );
  switch ($config['format']) {
    case '_none':
      $hook = 'image';
      break;

    default:
      $hook = 'image_style';
      $variables['style_name'] = $config['format'];
      break;
  }

  return theme($hook, $variables);
}
